name: 🔄 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code Quality & Static Analysis
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎨 Code formatting check
        run: npm run format:check

      - name: 🔬 ESLint analysis
        run: npm run lint:check

      - name: 📝 TypeScript type checking
        run: npm run type-check

      - name: 🔒 Secret detection
        run: |
          npx secretlint "**/*"
          echo "✅ No secrets detected"

      - name: 📊 Upload ESLint results
        if: always()
        uses: github/super-linter/slim@v7
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_CSS: true
          VALIDATE_JSON: true

  # Job 2: Security Scanning
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 npm audit
        run: |
          npm audit --audit-level=moderate
          echo "✅ No critical vulnerabilities found"

      - name: 🐳 Dockerfile security scan
        if: hashFiles('Dockerfile*') != ''
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile || true
          echo "✅ Dockerfile security scan completed"

      - name: 🔒 Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: typescript, javascript

  # Job 3: Unit Tests with Coverage
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false
        env:
          CI: true

      - name: 📊 Coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-node-${{ matrix.node-version }}

      - name: 📈 Coverage comment
        if: github.event_name == 'pull_request' && matrix.node-version == '20'
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  # Job 4: Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        test-type: [frontend, backend]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔗 Run ${{ matrix.test-type }} integration tests
        run: npm run test:integration:${{ matrix.test-type }}
        env:
          CI: true

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Job 5: Build Verification
  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: npm run build
        env:
          CI: true

      - name: 📊 Bundle analysis
        run: npm run analyze
        env:
          ANALYZE: true

      - name: 📏 Bundle size check
        run: npm run size-limit

      - name: 🗂️ Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .next/
            out/
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
          retention-days: 7

  # Job 6: Performance Validation
  performance-validation:
    name: ⚡ Performance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-verification

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts

      - name: 🚀 Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          CI: true

      - name: 📊 Lighthouse CI
        run: npm run perf:lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: ⚡ Bundle performance check
        run: npm run perf:bundle

      - name: 📈 Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            .lighthouseci/
            performance-results/
          retention-days: 30

  # Job 7: Dependency & License Check
  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Unused dependency check
        run: npm run knip:production

      - name: 🔄 Circular dependency check
        run: npm run madge

      - name: 📄 License compliance check
        run: |
          npx license-checker --summary --production --excludePrivatePackages
          echo "✅ License compliance verified"

  # Consolidation Job
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    if: always()
    needs:
      - code-quality
      - security-scan
      - unit-tests
      - integration-tests
      - build-verification
      - performance-validation
      - dependency-check

    steps:
      - name: 🎉 All checks passed
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Code quality verified"
          echo "🛡️ Security scan completed"
          echo "🧪 All tests passed"
          echo "🏗️ Build verification successful"
          echo "⚡ Performance validation passed"
          echo "📦 Dependencies verified"

      - name: ❌ Some checks failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ Some CI checks failed. Please review the logs above."
          exit 1

      - name: 📬 Notify on success
        if: success() && github.ref == 'refs/heads/main'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ CI pipeline completed successfully for ${{ github.repository }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📬 Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ CI pipeline failed for ${{ github.repository }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
