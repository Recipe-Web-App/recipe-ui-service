name: 🛡️ Security & Compliance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      scan-type:
        description: 'Security scan type'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dependencies
          - containers
          - secrets
          - kubernetes

env:
  NODE_VERSION: '20'

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Static Application Security Testing (SAST)
  sast-analysis:
    name: 🔍 SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.scan-type == 'all' || github.event.inputs.scan-type == 'sast' || github.event.inputs.scan-type == ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔬 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'

      - name: 🔒 Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nextjs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: 🛡️ ESLint Security Plugin
        run: |
          npx eslint . \
            --ext .js,.jsx,.ts,.tsx \
            --config eslint.config.mjs \
            --format sarif \
            --output-file eslint-security-results.sarif
        continue-on-error: true

      - name: 📤 Upload ESLint SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-security-results.sarif
          category: eslint-security

  # Job 2: Dependency Security Scanning
  dependency-security:
    name: 📦 Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.scan-type == 'all' || github.event.inputs.scan-type == 'dependencies' || github.event.inputs.scan-type == ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: 🐍 Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json

      - name: 📊 Upload Snyk results to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: 🔒 License compliance check
        run: |
          npx license-checker --summary --production --json > license-report.json
          npx license-checker --production --excludePrivatePackages --failOn 'GPL'
          echo "✅ License compliance verified"

      - name: 📈 SBOM Generation
        run: |
          npx @cyclonedx/cyclonedx-npm --output-format JSON --output-file sbom.json
          echo "✅ Software Bill of Materials generated"

      - name: 📤 Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-results
          path: |
            npm-audit-results.json
            snyk-results.json
            license-report.json
            sbom.json
          retention-days: 30

  # Job 3: Container Security Scanning
  container-security:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: (github.event.inputs.scan-type == 'all' || github.event.inputs.scan-type == 'containers' || github.event.inputs.scan-type == '') && hashFiles('Dockerfile*') != ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🔍 Hadolint Dockerfile Linting
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: 🏗️ Build Docker image
        run: |
          docker build -t recipe-ui-service:security-scan .
          echo "✅ Docker image built successfully"

      - name: 🔒 Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'recipe-ui-service:security-scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: 🐋 Docker Scout Scan
        if: env.DOCKER_SCOUT_TOKEN != ''
        uses: docker/scout-action@v1
        with:
          command: cves
          image: recipe-ui-service:security-scan
          format: sarif
          output: docker-scout-results.sarif
        env:
          DOCKER_SCOUT_TOKEN: ${{ secrets.DOCKER_SCOUT_TOKEN }}

      - name: 📤 Upload container security results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            hadolint-results.sarif
            trivy-container-results.sarif
            docker-scout-results.sarif

      - name: 🗂️ Archive container scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-security-results
          path: |
            hadolint-results.sarif
            trivy-container-results.sarif
            docker-scout-results.sarif
          retention-days: 30

  # Job 4: Secret Detection
  secret-detection:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.scan-type == 'all' || github.event.inputs.scan-type == 'secrets' || github.event.inputs.scan-type == ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Secretlint scan
        run: |
          npx secretlint "**/*" --format json --output secretlint-results.json
          npx secretlint "**/*"
          echo "✅ Secretlint scan completed"

      - name: 🕵️ TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 GitLeaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 📤 Upload secret detection results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-detection-results
          path: |
            secretlint-results.json
            gitleaks-report.json
          retention-days: 30

  # Job 5: Kubernetes Security
  kubernetes-security:
    name: ☸️ Kubernetes Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: (github.event.inputs.scan-type == 'all' || github.event.inputs.scan-type == 'kubernetes' || github.event.inputs.scan-type == '') && hashFiles('k8s/**/*.yaml') != ''

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 🔧 Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: 📋 Install kube-score
        run: |
          curl -sL https://github.com/zegl/kube-score/releases/download/v1.16.1/kube-score_1.16.1_linux_amd64.tar.gz | tar xz
          sudo mv kube-score /usr/local/bin/
          chmod +x /usr/local/bin/kube-score

      - name: 🔧 Install kubeval
        run: |
          curl -sL https://github.com/instrumenta/kubeval/releases/download/v0.16.1/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin/
          chmod +x /usr/local/bin/kubeval

      - name: 🔧 Install conftest
        run: |
          curl -sL https://github.com/open-policy-agent/conftest/releases/download/v0.46.0/conftest_0.46.0_Linux_x86_64.tar.gz | tar xz
          sudo mv conftest /usr/local/bin/
          chmod +x /usr/local/bin/conftest

      - name: ✅ Kubernetes manifest validation
        run: |
          echo "Running kubeval validation..."
          find k8s -name "*.yaml" -exec kubeval {} \;
          echo "✅ Kubernetes manifest validation passed"

      - name: 🏆 Kubernetes best practices (kube-score)
        run: |
          echo "Running kube-score analysis..."
          find k8s -name "*.yaml" -exec kube-score score {} \;
          echo "✅ Kubernetes best practices analysis completed"

      - name: 🛡️ Security policies (Conftest + OPA)
        run: |
          echo "Running Conftest security policies..."
          find k8s -name "*.yaml" -exec conftest verify --policy conftest-policy.rego {} \;
          echo "✅ Security policy validation passed"

      - name: 🔒 Kubesec security analysis
        run: |
          echo "Running Kubesec security analysis..."
          for file in k8s/*.yaml; do
            if [ -f "$file" ]; then
              curl -sSX POST --data-binary @"$file" https://v2.kubesec.io/scan
              echo "Analyzed: $file"
            fi
          done
          echo "✅ Kubesec analysis completed"

  # Job 6: Compliance & Reporting
  compliance-report:
    name: 📋 Compliance Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - sast-analysis
      - dependency-security
      - container-security
      - secret-detection
      - kubernetes-security
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v5

      - name: 📥 Download all security artifacts
        uses: actions/download-artifact@v5
        with:
          path: security-results
          pattern: '*-security-results'
          merge-multiple: true

      - name: 📊 Generate compliance report
        run: |
          echo "# 🛡️ Security & Compliance Report" > compliance-report.md
          echo "" >> compliance-report.md
          echo "**Generated:** $(date)" >> compliance-report.md
          echo "**Commit:** ${{ github.sha }}" >> compliance-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Security Scan Results" >> compliance-report.md
          echo "- SAST Analysis: ${{ needs.sast-analysis.result }}" >> compliance-report.md
          echo "- Dependency Security: ${{ needs.dependency-security.result }}" >> compliance-report.md
          echo "- Container Security: ${{ needs.container-security.result }}" >> compliance-report.md
          echo "- Secret Detection: ${{ needs.secret-detection.result }}" >> compliance-report.md
          echo "- Kubernetes Security: ${{ needs.kubernetes-security.result }}" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Compliance Status" >> compliance-report.md

          # Check if all scans passed
          if [[ "${{ needs.sast-analysis.result }}" == "success" &&
                "${{ needs.dependency-security.result }}" == "success" &&
                "${{ needs.secret-detection.result }}" == "success" ]]; then
            echo "✅ **COMPLIANT** - All security checks passed" >> compliance-report.md
          else
            echo "❌ **NON-COMPLIANT** - Some security checks failed" >> compliance-report.md
          fi

          echo "" >> compliance-report.md
          echo "## Next Steps" >> compliance-report.md
          echo "1. Review security findings in GitHub Security tab" >> compliance-report.md
          echo "2. Address any high/critical vulnerabilities" >> compliance-report.md
          echo "3. Update dependencies as recommended" >> compliance-report.md
          echo "4. Verify compliance before production deployment" >> compliance-report.md

      - name: 📤 Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: |
            compliance-report.md
            security-results/
          retention-days: 90

      - name: 💬 Comment compliance status on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: 🚨 Security alert on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 **SECURITY ALERT** 🚨
            Security scan failed for ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Please review the security findings immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: 📬 Success notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🛡️ Security scan completed successfully for ${{ github.repository }}
            All compliance checks passed ✅
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
